/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.AdvancedTasks.model.impl;

import com.liferay.AdvancedTasks.model.AdvTaskMapping;
import com.liferay.AdvancedTasks.model.AdvTaskMappingModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdvTaskMapping service. Represents a row in the &quot;AdvancedTasks_AdvTaskMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.AdvancedTasks.model.AdvTaskMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdvTaskMappingImpl}.
 * </p>
 *
 * @author David Proba
 * @see AdvTaskMappingImpl
 * @see com.liferay.AdvancedTasks.model.AdvTaskMapping
 * @see com.liferay.AdvancedTasks.model.AdvTaskMappingModel
 * @generated
 */
public class AdvTaskMappingModelImpl extends BaseModelImpl<AdvTaskMapping>
	implements AdvTaskMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a adv task mapping model instance should use the {@link com.liferay.AdvancedTasks.model.AdvTaskMapping} interface instead.
	 */
	public static final String TABLE_NAME = "AdvancedTasks_AdvTaskMapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "atMId", Types.BIGINT },
			{ "atMTaskId", Types.BIGINT },
			{ "atMDependentFromId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table AdvancedTasks_AdvTaskMapping (atMId LONG not null primary key,atMTaskId LONG,atMDependentFromId LONG)";
	public static final String TABLE_SQL_DROP = "drop table AdvancedTasks_AdvTaskMapping";
	public static final String ORDER_BY_JPQL = " ORDER BY advTaskMapping.atMId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY AdvancedTasks_AdvTaskMapping.atMId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.AdvancedTasks.model.AdvTaskMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.AdvancedTasks.model.AdvTaskMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.AdvancedTasks.model.AdvTaskMapping"),
			true);
	public static long ATMDEPENDENTFROMID_COLUMN_BITMASK = 1L;
	public static long ATMTASKID_COLUMN_BITMASK = 2L;
	public static long ATMID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.AdvancedTasks.model.AdvTaskMapping"));

	public AdvTaskMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _atMId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAtMId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _atMId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdvTaskMapping.class;
	}

	@Override
	public String getModelClassName() {
		return AdvTaskMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("atMId", getAtMId());
		attributes.put("atMTaskId", getAtMTaskId());
		attributes.put("atMDependentFromId", getAtMDependentFromId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long atMId = (Long)attributes.get("atMId");

		if (atMId != null) {
			setAtMId(atMId);
		}

		Long atMTaskId = (Long)attributes.get("atMTaskId");

		if (atMTaskId != null) {
			setAtMTaskId(atMTaskId);
		}

		Long atMDependentFromId = (Long)attributes.get("atMDependentFromId");

		if (atMDependentFromId != null) {
			setAtMDependentFromId(atMDependentFromId);
		}
	}

	@Override
	public long getAtMId() {
		return _atMId;
	}

	@Override
	public void setAtMId(long atMId) {
		_atMId = atMId;
	}

	@Override
	public long getAtMTaskId() {
		return _atMTaskId;
	}

	@Override
	public void setAtMTaskId(long atMTaskId) {
		_columnBitmask |= ATMTASKID_COLUMN_BITMASK;

		if (!_setOriginalAtMTaskId) {
			_setOriginalAtMTaskId = true;

			_originalAtMTaskId = _atMTaskId;
		}

		_atMTaskId = atMTaskId;
	}

	public long getOriginalAtMTaskId() {
		return _originalAtMTaskId;
	}

	@Override
	public long getAtMDependentFromId() {
		return _atMDependentFromId;
	}

	@Override
	public void setAtMDependentFromId(long atMDependentFromId) {
		_columnBitmask |= ATMDEPENDENTFROMID_COLUMN_BITMASK;

		if (!_setOriginalAtMDependentFromId) {
			_setOriginalAtMDependentFromId = true;

			_originalAtMDependentFromId = _atMDependentFromId;
		}

		_atMDependentFromId = atMDependentFromId;
	}

	public long getOriginalAtMDependentFromId() {
		return _originalAtMDependentFromId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdvTaskMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdvTaskMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdvTaskMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdvTaskMappingImpl advTaskMappingImpl = new AdvTaskMappingImpl();

		advTaskMappingImpl.setAtMId(getAtMId());
		advTaskMappingImpl.setAtMTaskId(getAtMTaskId());
		advTaskMappingImpl.setAtMDependentFromId(getAtMDependentFromId());

		advTaskMappingImpl.resetOriginalValues();

		return advTaskMappingImpl;
	}

	@Override
	public int compareTo(AdvTaskMapping advTaskMapping) {
		long primaryKey = advTaskMapping.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdvTaskMapping)) {
			return false;
		}

		AdvTaskMapping advTaskMapping = (AdvTaskMapping)obj;

		long primaryKey = advTaskMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AdvTaskMappingModelImpl advTaskMappingModelImpl = this;

		advTaskMappingModelImpl._originalAtMTaskId = advTaskMappingModelImpl._atMTaskId;

		advTaskMappingModelImpl._setOriginalAtMTaskId = false;

		advTaskMappingModelImpl._originalAtMDependentFromId = advTaskMappingModelImpl._atMDependentFromId;

		advTaskMappingModelImpl._setOriginalAtMDependentFromId = false;

		advTaskMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdvTaskMapping> toCacheModel() {
		AdvTaskMappingCacheModel advTaskMappingCacheModel = new AdvTaskMappingCacheModel();

		advTaskMappingCacheModel.atMId = getAtMId();

		advTaskMappingCacheModel.atMTaskId = getAtMTaskId();

		advTaskMappingCacheModel.atMDependentFromId = getAtMDependentFromId();

		return advTaskMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{atMId=");
		sb.append(getAtMId());
		sb.append(", atMTaskId=");
		sb.append(getAtMTaskId());
		sb.append(", atMDependentFromId=");
		sb.append(getAtMDependentFromId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.liferay.AdvancedTasks.model.AdvTaskMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>atMId</column-name><column-value><![CDATA[");
		sb.append(getAtMId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>atMTaskId</column-name><column-value><![CDATA[");
		sb.append(getAtMTaskId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>atMDependentFromId</column-name><column-value><![CDATA[");
		sb.append(getAtMDependentFromId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AdvTaskMapping.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			AdvTaskMapping.class
		};
	private long _atMId;
	private long _atMTaskId;
	private long _originalAtMTaskId;
	private boolean _setOriginalAtMTaskId;
	private long _atMDependentFromId;
	private long _originalAtMDependentFromId;
	private boolean _setOriginalAtMDependentFromId;
	private long _columnBitmask;
	private AdvTaskMapping _escapedModel;
}