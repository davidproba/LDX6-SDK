/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.liferay.sample.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sample.model.BeaconDDL;
import com.liferay.sample.model.BeaconDDLModel;
import com.liferay.sample.model.BeaconDDLSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BeaconDDL service. Represents a row in the &quot;BeaconDDL_BeaconDDL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sample.model.BeaconDDLModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BeaconDDLImpl}.
 * </p>
 *
 * @author David Proba
 * @see BeaconDDLImpl
 * @see com.liferay.sample.model.BeaconDDL
 * @see com.liferay.sample.model.BeaconDDLModel
 * @generated
 */
@JSON(strict = true)
public class BeaconDDLModelImpl extends BaseModelImpl<BeaconDDL>
	implements BeaconDDLModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a beacon d d l model instance should use the {@link com.liferay.sample.model.BeaconDDL} interface instead.
	 */
	public static final String TABLE_NAME = "BeaconDDL_BeaconDDL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "Id", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table BeaconDDL_BeaconDDL (uuid_ VARCHAR(75) null,Id LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table BeaconDDL_BeaconDDL";
	public static final String ORDER_BY_JPQL = " ORDER BY beaconDDL.Id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY BeaconDDL_BeaconDDL.Id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sample.model.BeaconDDL"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sample.model.BeaconDDL"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sample.model.BeaconDDL"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;
	public static long ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BeaconDDL toModel(BeaconDDLSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BeaconDDL model = new BeaconDDLImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BeaconDDL> toModels(BeaconDDLSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BeaconDDL> models = new ArrayList<BeaconDDL>(soapModels.length);

		for (BeaconDDLSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sample.model.BeaconDDL"));

	public BeaconDDLModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BeaconDDL.class;
	}

	@Override
	public String getModelClassName() {
		return BeaconDDL.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("Id", getId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long Id = (Long)attributes.get("Id");

		if (Id != null) {
			setId(Id);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			BeaconDDL.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BeaconDDL toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BeaconDDL)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BeaconDDLImpl beaconDDLImpl = new BeaconDDLImpl();

		beaconDDLImpl.setUuid(getUuid());
		beaconDDLImpl.setId(getId());

		beaconDDLImpl.resetOriginalValues();

		return beaconDDLImpl;
	}

	@Override
	public int compareTo(BeaconDDL beaconDDL) {
		long primaryKey = beaconDDL.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BeaconDDL)) {
			return false;
		}

		BeaconDDL beaconDDL = (BeaconDDL)obj;

		long primaryKey = beaconDDL.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		BeaconDDLModelImpl beaconDDLModelImpl = this;

		beaconDDLModelImpl._originalUuid = beaconDDLModelImpl._uuid;

		beaconDDLModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BeaconDDL> toCacheModel() {
		BeaconDDLCacheModel beaconDDLCacheModel = new BeaconDDLCacheModel();

		beaconDDLCacheModel.uuid = getUuid();

		String uuid = beaconDDLCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			beaconDDLCacheModel.uuid = null;
		}

		beaconDDLCacheModel.Id = getId();

		return beaconDDLCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", Id=");
		sb.append(getId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sample.model.BeaconDDL");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = BeaconDDL.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			BeaconDDL.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _Id;
	private long _columnBitmask;
	private BeaconDDL _escapedModel;
}